{"version":3,"sources":["reportWebVitals.ts","utils/videos.ts","components/VideoWrapper.tsx","pages/StageOne.tsx","pages/Demo.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getVideoUrl","params","type","floor","wall","format","newParams","VideoWrapper","videos","supportWebm","preparedVideos","videoUrl","useState","preparedVideo","setPreparedVideo","timeRef","useRef","player","screen","setScreen","playing","setPlaying","useEffect","makeScreen","current","getInternalPlayer","videoRef","canvas","document","createElement","width","offsetWidth","height","offsetHeight","ctx","getContext","drawImage","dataURI","toDataURL","style","maxWidth","margin","Box","mt","position","ref","url","muted","loop","playsinline","progressInterval","onReady","htmlVideo","addEventListener","seekTo","onSeek","onPlay","onProgress","playedSeconds","alt","top","left","src","Header","styled","div","StageOne","videoState","updateSet","goNext","isReady","setIsReady","setPreparedVideos","progress","setProgress","totalProgress","useMemo","Object","values","reduce","acc","val","keys","length","canPlayType","variants","map","value","promises","arr","videoFile","key","Promise","resolve","req","XMLHttpRequest","open","responseType","onprogress","event","old","loaded","total","onload","this","status","vid","URL","createObjectURL","response","send","all","data","console","log","found","find","video","videType","mx","FormControl","InputLabel","label","Select","name","onChange","e","target","videoValue","MenuItem","Button","color","variant","onClick","LinearProgress","Wrapper","Demo","stage","setStage","setVideoState","slice","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c8aa275f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type TypeParams = 'open' | 'close';\ntype FloorParams = 'light' | 'dark';\ntype WallParams = 'light' | 'dark';\n\nexport type VideoParams = {\n  type?: TypeParams,\n  floor?: FloorParams,\n  wall?: WallParams\n}\n\nexport function getVideoUrl(params: VideoParams = {\n  type: 'open',\n  floor: 'light',\n  wall: 'light'\n}, format = 'mp4') {\n  const newParams: VideoParams = {\n    type: 'open',\n    floor: 'light',\n    wall: 'light',\n    ...params\n  };\n\n  return `/videos/new2/${newParams.type}_${newParams.floor}_${newParams.wall}.${format}`;\n}\n","import React, {FC, useEffect, useRef, useState} from 'react';\nimport ReactPlayer from 'react-player';\nimport {Box} from '@material-ui/core';\nimport {PreparedVideo} from '../pages/StageOne';\n\ntype VideoValue = {\n  label: string\n  value: string\n}\n\ntype VideoType = {\n  label: string\n  values: VideoValue[]\n}\n\ntype VideoWrapperProps = {\n  videos: VideoType[]\n  supportWebm: boolean | null\n  preparedVideos: PreparedVideo[]\n  videoUrl: string\n}\n\nconst VideoWrapper: FC<VideoWrapperProps> = ({videos, supportWebm, preparedVideos, videoUrl}) => {\n\n  const [preparedVideo, setPreparedVideo] = useState<string>('');\n\n  const timeRef = useRef(0);\n  const player = useRef<ReactPlayer>(null);\n\n  const [screen, setScreen] = useState<string | null>(null);\n  const [playing, setPlaying] = useState(true);\n\n  useEffect(() => {\n    makeScreen();\n\n    setPreparedVideo(videoUrl);\n  }, [videoUrl]);\n\n  const makeScreen = () => {\n\n    if (player.current) {\n      if (!player.current.getInternalPlayer()) {\n        return;\n      }\n\n      const videoRef: HTMLVideoElement = player.current.getInternalPlayer() as HTMLVideoElement;\n\n      const canvas = document.createElement('canvas');\n\n      canvas.width = videoRef.offsetWidth;\n      canvas.height = videoRef.offsetHeight;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        ctx.drawImage(player.current.getInternalPlayer() as HTMLVideoElement, 0, 0, canvas.width, canvas.height);\n\n        const dataURI = canvas.toDataURL('image/jpeg');\n\n        setScreen(dataURI);\n      }\n    }\n  };\n\n  const seekToCurrent = () => {\n    if (player.current) {\n      player.current.seekTo(timeRef.current, 'seconds');\n    }\n  };\n\n\n  const handleReady = () => {\n    if (player.current) {\n      const htmlVideo = player.current.getInternalPlayer() as HTMLVideoElement;\n\n      if (htmlVideo) {\n        htmlVideo.addEventListener('loadedmetadata', () => {\n          seekToCurrent();\n        });\n      }\n    }\n  };\n\n  const handleSeek = () => {\n    setPlaying(true);\n  };\n\n  const handlePlay = () => {\n    setScreen(null);\n  };\n\n  // useEffect(() => {\n  //   console.log('set');\n  //\n  // }, [player.current, playing, videoUrl]);\n\n  return (\n    <div style={{maxWidth: '960px', margin: '0 auto'}}>\n      <Box mt={1} position=\"relative\">\n        <ReactPlayer\n          width=\"100%\"\n          height=\"auto\"\n          ref={player}\n          url={preparedVideo}\n          muted={true}\n          loop={true}\n          playsinline={true}\n          playing={playing}\n          progressInterval={10}\n          onReady={handleReady}\n          onSeek={handleSeek}\n          onPlay={handlePlay}\n          onProgress={({playedSeconds}) => {\n            if (playedSeconds > 0) {\n              timeRef.current = playedSeconds;\n            }\n          }}\n        />\n        {screen && (\n          <img alt=\"screen\" style={{position: 'absolute', top: 0, left: 0, width: '100%', height: 'auto'}}\n            src={screen}/>\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default VideoWrapper;\n","import React, {FC, useEffect, useMemo, useState} from 'react';\nimport {VideoType} from './Demo';\nimport {getVideoUrl, VideoParams} from '../utils/videos';\nimport styled from 'styled-components';\nimport {Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Select} from '@material-ui/core';\nimport VideoWrapper from '../components/VideoWrapper';\n\ntype StageProps = {\n  videos: Array<VideoType>\n  videoState: VideoParams\n  updateSet: Function\n  goNext?: Function\n}\n\nexport type PreparedVideo = {\n  key: number | string\n  value: string\n}\n\nconst Header = styled.div`\n  display: flex;\n`;\n\nconst StageOne: FC<StageProps> = ({videos, videoState, updateSet, goNext = null}) => {\n\n  const [webmSupported, setWebmSupported] = useState<boolean | null>(null);\n\n  const [isReady, setIsReady] = useState(false);\n\n  const [preparedVideos, setPreparedVideos] = useState<PreparedVideo[]>([]);\n\n  const [progress, setProgress] = useState<{ [key: string]: number; }>({});\n\n  const totalProgress = useMemo(() => {\n    const total = Object.values(progress).reduce((acc, val) => {\n      return acc + val;\n    }, 0) as number;\n\n    return total / Object.keys(progress).length * 100;\n\n  }, [progress]);\n\n  useEffect(() => {\n    const video = document.createElement('video');\n    let sup = video.canPlayType('video/webm') != '';\n\n    // remove webm\n    // sup = false;\n\n    // setWebmSupported(sup);\n    //\n    // if (!sup) {\n    //   setIsReady(true);\n    //   return;\n    // }\n\n    const variants = videos.map((type) => {\n      return type.values.map((value) => {\n        return value.value;\n      });\n    });\n\n    let videoFilesMap;\n    let videoFiles: Array<VideoParams>;\n\n    if (variants.length === 2) {\n      videoFilesMap = [\n        [variants[0][0], variants[1][0]],\n        [variants[0][0], variants[1][1]],\n        [variants[0][1], variants[1][0]],\n        [variants[0][1], variants[1][1]],\n      ];\n\n      videoFiles = videoFilesMap.map((arr) => {\n        return {\n          type: arr[0],\n          floor: arr[1],\n          wall: videoState.wall\n        } as VideoParams;\n      });\n    } else {\n      videoFilesMap = [\n        variants[0][0],\n        variants[0][1]\n      ];\n\n      videoFiles = videoFilesMap.map((arr) => {\n        return {\n          type: videoState.type,\n          floor: videoState.floor,\n          wall: arr\n        } as VideoParams;\n      });\n    }\n\n    const promises = videoFiles.map((videoFile, key) => {\n      return new Promise((resolve) => {\n        const req = new XMLHttpRequest;\n        req.open('GET', getVideoUrl(videoFile), true);\n        req.responseType = 'blob';\n\n        req.onprogress = function (event) {\n          setProgress((old) => {\n            return {\n              ...old,\n              [key]: event.loaded / event.total\n            };\n          });\n        };\n\n        req.onload = function () {\n          if (this.status === 200) {\n            const vid = URL.createObjectURL(this.response);\n            resolve({\n              key: getVideoUrl(videoFile),\n              value: vid\n            } as PreparedVideo);\n          }\n        };\n\n        req.send();\n      });\n    }) as Promise<PreparedVideo>[];\n\n    Promise.all(promises).then((data) => {\n      setIsReady(true);\n      setPreparedVideos(data);\n    });\n\n  }, []);\n\n  const videoUrl = useMemo(() => {\n    console.log(videoState);\n    console.log(getVideoUrl(videoState));\n    return getVideoUrl(videoState);\n  }, [videoState]);\n\n  const preparedVideo = useMemo(() => {\n    const found = preparedVideos.find((video) => {\n      return video.key === videoUrl;\n    });\n\n    return found ? found.value : videoUrl;\n  }, [videoUrl, preparedVideos]);\n\n  return (\n    <div>\n      <Header>\n        {videos.map(((videType) => (\n          <Box mx={1} key={videType.label}>\n            <FormControl>\n              <InputLabel>\n                {videType.label}\n              </InputLabel>\n              <Select value={videoState[videType.name]}\n                onChange={(e) => updateSet(videType.name, e.target.value as string)}>\n                {videType.values.map((videoValue) => (\n                  <MenuItem value={videoValue.value} key={videoValue.label}>\n                    {videoValue.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        )))}\n\n        {goNext && (\n          <Button color=\"primary\" variant=\"contained\" onClick={() => goNext()}>\n            Weiter\n          </Button>\n        )}\n\n      </Header>\n\n      <Box mt={5}>\n        {!isReady && (\n          <LinearProgress variant=\"determinate\" value={totalProgress}/>\n        )}\n\n        {isReady && (\n          <VideoWrapper\n            videos={videos}\n            supportWebm={false}\n            preparedVideos={preparedVideos}\n            videoUrl={preparedVideo}\n          />\n        )}\n\n      </Box>\n\n    </div>\n  );\n};\n\nexport default StageOne;\n","import React, {FC, useState} from 'react';\nimport StageOne from './StageOne';\nimport StageTwo from './StageTwo';\nimport styled from 'styled-components';\nimport {getVideoUrl, TypeParams, VideoParams} from '../utils/videos';\nimport {Box, FormControl, InputLabel, MenuItem, Select} from '@material-ui/core';\n\ntype VideoValue = {\n  label: string\n  value: string\n}\n\ntype TypeEnum = 'type' | 'floor' |  'wall';\n\nexport type VideoType = {\n  name: TypeEnum\n  label: string\n  values: VideoValue[]\n}\n\nconst Wrapper = styled.div`\n  max-width: 960px;\n  margin: 20px auto 0;\n`;\n\nconst videos:Array<VideoType> = [\n  {\n    name: 'type',\n    label: 'Grundriss',\n    values: [\n      {\n        label: 'Ohne Abtrennung',\n        value: 'open'\n      },\n      {\n        label: 'Mit Abtrennung',\n        value: 'close'\n      }\n    ]\n  },\n  {\n    name: 'floor',\n    label: 'Boden',\n    values: [\n      {\n        label: 'Hell',\n        value: 'light'\n      },\n      {\n        label: 'Dunkel',\n        value: 'dark'\n      }\n    ]\n  },\n  {\n    name: 'wall',\n    label: 'Wand- und Deckelbeläge',\n    values: [\n      {\n        label: 'Hell ',\n        value: 'light'\n      },\n      {\n        label: 'Dunkel',\n        value: 'dark'\n      }\n    ]\n  }\n];\n\nconst Demo: FC = () => {\n\n  const [stage, setStage] = useState<'stageOne' | 'stageTwo'>('stageOne');\n\n  const [videoState, setVideoState] = useState<VideoParams>({\n    type: 'open',\n    floor: 'light',\n    wall: 'light'\n  });\n\n  const updateSet = (type:TypeEnum, value:string) => {\n    setVideoState((old) => {\n      return {\n        ...old,\n        [type]: value\n      };\n    });\n  };\n\n  const goNext = () => {\n    setStage('stageTwo');\n  };\n\n  return (\n    <div>\n      <Wrapper>\n        {stage === 'stageOne' && <StageOne videos={videos.slice(0, 2)} videoState={videoState} updateSet={updateSet} goNext={goNext}/>}\n        {stage === 'stageTwo' && <StageOne videos={videos.slice(2, 3)} videoState={videoState} updateSet={updateSet}/>}\n      </Wrapper>\n    </div>\n  );\n};\n\nexport default Demo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Demo from './pages/Demo';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Demo/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}